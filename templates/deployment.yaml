kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.microservice.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.distributedApplicationName }}
    service: {{ .Values.microservice.name }}
spec:
  strategy:
    {{- include "dapr-microservice-chart.deployment.strategy.rollingUpdate" . | nindent 6 }}
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.distributedApplicationName }}
      service: {{ .Values.microservice.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.distributedApplicationName }}
        service: {{ .Values.microservice.name }}
      annotations:
        dapr.io/enabled: !!str {{ .Values.dapr.enabled | default "false" }}
        dapr.io/app-id: {{ .Values.dapr.id | default .Values.microservice.name }}
        dapr.io/app-port: !!str {{ .Values.microservice.appPort }}
        dapr.io/config: {{ .Values.dapr.config }}
        dapr.io/log-as-json: !!str {{ .Values.dapr.logJson | default "false" }}
        {{- if eq .Values.bestEffort "false" | default "false" }}
        {{- if hasKey .Values.resources "dapr" }}
        dapr.io/sidecar-cpu-request: !!str {{ .Values.resources.dapr.requests.cpu }}
        dapr.io/sidecar-memory-request: !!str  {{ .Values.resources.dapr.requests.memory }}
        dapr.io/sidecar-cpu-limit: !!str {{ .Values.resources.dapr.limits.cpu }}
        dapr.io/sidecar-memory-limit: !!str {{ .Values.resources.dapr.limits.memory }}
        {{- end }}
        {{- end }}
        dapr.io/http-max-request-size: !!str {{ .Values.dapr.maxRequestSize }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount | default "default" }}
    #   volumes:
    #   {{- if or .Values.secrets.enabled (not (hasKey .Values "enableSecretStore")) }}
    #     - name: secrets-store
    #       csi:
    #         driver: secrets-store.csi.k8s.io
    #         readOnly: true
    #         volumeAttributes:
    #           secretProviderClass: {{ .Values.distributedApplicationName }}-spc
    #  {{- end }}
      containers:
        - name: {{ .Values.microservice.name }}-api
          image: {{ .Values.microservice.image }}
          imagePullPolicy: {{ .Values.microservice.imagePullPolicy }}
          {{ if eq .Values.resources.bestEffort "false" }}
          resources:
            {{ if hasKey .Values.resources "requests" }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }} 
            {{ end }}
            {{ if hasKey .Values.resources "limits" }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            {{ end }}
          {{ end }}
          ports:
            - name: api-http
              containerPort: {{ .Values.microservice.appPort }}
              protocol: TCP   
          env:
          {{- $secretStore := .Values.secretKeys.appSecrets -}}
          {{- range $key, $val := .Values.env.secretsBinding }}
              - name: !!str {{ $key }}
              valueFrom:
                  secretKeyRef:
                  name: !!str {{ $secretStore }}
                  key: !!str {{ $val | quote }}
          {{- end }}
          # envFrom:
          #     - configMapRef:
          #         name: {{ .Values.microserviceName }}-cm
          readinessProbe:
            httpGet:
              path: {{ .Values.healthProbePath }}
              port: {{ .Values.microservice.appPort }}
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 60